{"version":3,"sources":["base64.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":[";(function(root){\r\n\r\n  var charMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n\r\n  function enc(input) {\r\n    var str = String(input);\r\n    var map = charMap;\r\n    var block = 0,\r\n        output = '';\r\n    var prx = [2, 4, 6, 8];\r\n    for (var code, idx = 3 / 4, uarr;\r\n    // 能取到字符时、block未处理完时、长度不足时\r\n    !isNaN(code = str.charCodeAt(idx)) || 63 & block || (map = '=', (idx - 3 / 4) % 1); idx += 3 / 4) {\r\n      if (code > 0x7F) {\r\n        // utf8字符处理\r\n        (uarr = encodeURI(str.charAt(idx)).split('%')).shift();\r\n        for (var hex, idx2 = idx % 1; hex = uarr[idx2 | 0]; idx2 += 3 / 4) {\r\n          block = block << 8 | parseInt(hex, 16);\r\n          output += map.charAt(63 & block >> 8 - idx2 % 1 * 8);\r\n        }\r\n        idx = idx === 3 / 4 ? 0 : idx; // 修复首字符为utf8字符时出错的BUG\r\n        idx += 3 / 4 * uarr.length % 1; // idx补偿\r\n      } else {\r\n        block = block << 8 | code;\r\n        output += map.charAt(63 & block >> 8 - idx % 1 * 8);\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  function dec(input) {\r\n    var str = String(input),\r\n        map = charMap.slice(0, -1),\r\n        prx = [6, 4, 2, 0],\r\n        output = '',\r\n        block = 0,\r\n        code,\r\n        buffer = 0,\r\n        hex = '';\r\n    try {\r\n      for (var i = 0; (code = map.indexOf(str[i])) > -1; i++) {\r\n        block = block << 6 | code;\r\n        if (i % 4) {\r\n          buffer = 255 & block >> prx[i % 4];\r\n          if (buffer < 128) {\r\n            output += hex ? decodeURI(hex) : '';\r\n            output += String.fromCharCode(buffer);\r\n            hex = '';\r\n          } else {\r\n            hex += '%' + ('0' + buffer.toString(16)).slice(-2);\r\n          }\r\n        }\r\n      }\r\n      output += hex ? decodeURI(hex) : '';\r\n      return output;\r\n    } catch (err) {\r\n      // console.log(err);\r\n      throw new Error('base64 malformed!');\r\n    }\r\n  }\r\n\r\n  var base64 = {\r\n    encode: enc,\r\n    decode: dec\r\n  };\r\n\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function() {\r\n      return base64;\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    for (var key in base64) {\r\n      base64.hasOwnProperty(key) && (exports[key] = base64[key]);\r\n    }\r\n  } else {\r\n    root.base64 = base64;\r\n  }\r\n\r\n})(typeof global === 'object' && global || this);\r\n"]}